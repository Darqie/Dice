import { useEffect, useRef } from "react";
import { DiceTransform } from "../types/DiceTransform";
import { DiceRoll } from "./DiceRoll";
import { InteractiveDice } from "./InteractiveDice";
import { useDiceRollStore } from "./store";

/** Dice roll based off of the values from the dice roll store */
export function InteractiveDiceRoll() {
  const roll = useDiceRollStore((state) => state.roll);
  const rollThrows = useDiceRollStore((state) => state.rollThrows);
  const finishDieRoll = useDiceRollStore((state) => state.finishDieRoll);

  const finishedTransforms = useDiceRollStore((state) => {
    const values = Object.values(state.rollTransforms);
    if (values.some((v) => v === null)) {
      return undefined;
    }
    return state.rollTransforms as Record<string, DiceTransform>;
  });

  const transformsRef = useRef<Record<string, DiceTransform | null> | null>(
    null
  );
  useEffect(
    () =>
      useDiceRollStore.subscribe((state) => {
        transformsRef.current = state.rollTransforms;
      }),
    []
  );

  // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∫–∏–¥–∫—ñ–≤
  const handleRollFinished = (id: string, number: number, transform: DiceTransform) => {
    console.log('[DICE] InteractiveDiceRoll: –ö–∏–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫—É–±–∏–∫–∞:', id, '–∑–Ω–∞—á–µ–Ω–Ω—è:', number);
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π finishDieRoll
    finishDieRoll(id, number, transform);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ –∫—É–±–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é
    const currentState = useDiceRollStore.getState();
    const allFinished = Object.values(currentState.rollValues).every((value) => value !== null);
    
    if (allFinished) {
      console.log('[DICE] InteractiveDiceRoll: –í—Å—ñ –∫—É–±–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é!');
      
      // –Ø–∫—â–æ —Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∫–∏–¥–æ–∫, –æ—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç
      if (roll && roll.hidden === false && roll.bonus !== undefined) {
        // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∫–∏–¥–æ–∫ - –æ—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É
        setTimeout(async () => {
          try {
            // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ OBR –¥–∏–Ω–∞–º—ñ—á–Ω–æ —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ —Ç–∏–ø–∞–º–∏
            const OBR = await import("@owlbear-rodeo/sdk");
            const currentMetadata = await OBR.room.getMetadata();
            const darqie = currentMetadata.darqie as any;
            if (darqie && darqie.activeRoll) {
              const updatedMetadata = { 
                ...currentMetadata, 
                darqie: { 
                  ...darqie, 
                  activeRoll: null 
                } 
              };
              await OBR.room.setMetadata(updatedMetadata);
              console.log('[DICE] InteractiveDiceRoll: –ó–∞–ø–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–∏–¥–∫—É –æ—á–∏—â–µ–Ω–æ');
            }
          } catch (error) {
            console.error("üé≤ [DICE] InteractiveDiceRoll: Error clearing auto roll request:", error);
          }
        }, 500);
      }
    }
  };

  if (!roll) {
    return null;
  }

  return (
    <DiceRoll
      roll={roll}
      rollThrows={rollThrows}
      finishedTransforms={finishedTransforms}
      onRollFinished={handleRollFinished}
      Dice={InteractiveDice}
      transformsRef={transformsRef}
    />
  );
} 