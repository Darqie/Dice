import OBR from "@owlbear-rodeo/sdk";
import React, { useEffect, useRef } from "react";
import { useDiceRollStore } from "../dice/store";
import { getDieFromDice } from "../helpers/getDieFromDice";
import { getPluginId } from "./getPluginId";
import { getDiceToRoll } from "../controls/store";
import { useDiceControlsStore } from "../controls/store";

/** Sync the current dice roll to the plugin */
export function DiceRollSync() {
  const prevIds = useRef<string[]>([]);
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–∏–¥–∫—ñ–≤
  const executeAutoRoll = async (rollRequest: { type: string; style: string; bonus?: number }) => {
    console.log('[DICE] executeAutoRoll –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', rollRequest);
    
    const diceControlsState = useDiceControlsStore.getState();
    const diceRollState = useDiceRollStore.getState();
    
    console.log('[DICE] diceControlsState:', diceControlsState);
    console.log('[DICE] diceRollState:', diceRollState);
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫—É–±–∏–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
    diceControlsState.setupDiceFromRequest(rollRequest.type, rollRequest.style, rollRequest.bonus || 0);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    const updatedDiceControlsState = useDiceControlsStore.getState();
    console.log('[DICE] –û–Ω–æ–≤–ª–µ–Ω–∏–π diceControlsState –ø—ñ—Å–ª—è setupDiceFromRequest:', {
      diceCounts: updatedDiceControlsState.diceCounts,
      diceById: updatedDiceControlsState.diceById,
      diceAdvantage: updatedDiceControlsState.diceAdvantage
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Proxy –æ–±'—î–∫—Ç–∏ —É –∑–≤–∏—á–∞–π–Ω—ñ –æ–±'—î–∫—Ç–∏
    const normalCounts = { ...updatedDiceControlsState.diceCounts };
    const normalDiceById = { ...updatedDiceControlsState.diceById };
    
    console.log('[DICE] –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ –æ–±\'—î–∫—Ç–∏:', {
      normalCounts,
      normalDiceById: Object.keys(normalDiceById)
    });
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫—É–±–∏–∫–∏ –¥–ª—è –∫–∏–¥–∫—É
    const diceToRoll = getDiceToRoll(
      normalCounts,
      updatedDiceControlsState.diceAdvantage,
      normalDiceById
    );
    
    console.log('[DICE] diceToRoll:', diceToRoll);
    console.log('[DICE] –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è getDiceToRoll:', {
      counts: updatedDiceControlsState.diceCounts,
      advantage: updatedDiceControlsState.diceAdvantage,
      diceById: Object.keys(updatedDiceControlsState.diceById)
    });
    
    if (diceToRoll.length > 0) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∫–∏–¥–∫—É
      const roll = {
        dice: diceToRoll,
        bonus: rollRequest.bonus || 0,
        hidden: false
      };
      
      console.log('[DICE] –°—Ç–≤–æ—Ä–µ–Ω–æ roll –æ–±\'—î–∫—Ç:', roll);
      console.log('[DICE] diceToRoll –¥–µ—Ç–∞–ª—å–Ω–æ:', JSON.stringify(diceToRoll, null, 2));
      
      // –í–∏–∫–æ–Ω—É—î–º–æ –∫–∏–¥–æ–∫ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é (—è–∫ —É –∑–≤–∏—á–∞–π–Ω–æ–º—É –∫–∏–¥–∫—É)
      try {
        console.log('[DICE] –¢–∏–ø startRoll:', typeof diceRollState.startRoll);
        console.log('[DICE] startRoll —Ñ—É–Ω–∫—Ü—ñ—è:', diceRollState.startRoll);
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ speedMultiplier = 5 –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        diceRollState.startRoll(roll, 5);
        console.log('[DICE] startRoll –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ speedMultiplier = 5');
        
        // –ù–ï –æ—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç –æ–¥—Ä–∞–∑—É - —á–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        console.log('[DICE] –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó...');
      } catch (error) {
        console.error('[DICE] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É startRoll:', error);
        
        // –û—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        try {
          const currentMetadata = await OBR.room.getMetadata();
          const updatedMetadata = { 
            ...currentMetadata, 
            darqie: { 
              ...(currentMetadata.darqie || {}), 
              activeRoll: null 
            } 
          };
          await OBR.room.setMetadata(updatedMetadata);
          console.log('[DICE] –ó–∞–ø–∏—Ç –æ—á–∏—â–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É');
        } catch (error) {
          console.error("üé≤ [DICE] Error clearing roll request:", error);
        }
      }
    } else {
      console.log('[DICE] –ù–µ–º–∞—î –∫—É–±–∏–∫—ñ–≤ –¥–ª—è –∫–∏–¥–∫—É');
      console.log('[DICE] –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
      console.log('[DICE] - diceCounts:', updatedDiceControlsState.diceCounts);
      console.log('[DICE] - diceById keys:', Object.keys(updatedDiceControlsState.diceById));
      console.log('[DICE] - diceAdvantage:', updatedDiceControlsState.diceAdvantage);
      
      // –û—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç —è–∫—â–æ –Ω–µ–º–∞—î –∫—É–±–∏–∫—ñ–≤
      try {
        const currentMetadata = await OBR.room.getMetadata();
        const updatedMetadata = { 
          ...currentMetadata, 
          darqie: { 
            ...(currentMetadata.darqie || {}), 
            activeRoll: null 
          } 
        };
        await OBR.room.setMetadata(updatedMetadata);
        console.log('[DICE] –ó–∞–ø–∏—Ç –æ—á–∏—â–µ–Ω–æ - –Ω–µ–º–∞—î –∫—É–±–∏–∫—ñ–≤');
      } catch (error) {
        console.error("üé≤ [DICE] Error clearing roll request:", error);
      }
    }
  };
  
  // –°–ª—É—Ö–∞—î–º–æ –∑–º—ñ–Ω–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ–≤ –∫—ñ–º–Ω–∞—Ç–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –ª–∏—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  useEffect(() => {
    const setupRoomMetadataListener = () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ OBR –≥–æ—Ç–æ–≤–∏–π –ø–µ—Ä–µ–¥ –ø—ñ–¥–ø–∏—Å–∫–æ—é
      if (!OBR.isAvailable) {
        return;
      }
      
      const handleRoomMetadataChange = async (metadata: { darqie?: { activeRoll?: { type: string; style: string; bonus?: number; connectionId?: string; playerName?: string } } }) => {
        if (metadata.darqie?.activeRoll) {
          const rollRequest = metadata.darqie.activeRoll;
          console.log('[DICE] –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∫–∏–¥–æ–∫:', rollRequest);
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ–π –∑–∞–ø–∏—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          const currentConnectionId = await OBR.player.getConnectionId();
          
          if (rollRequest.connectionId && rollRequest.connectionId !== currentConnectionId) {
            // –¶–µ–π –∑–∞–ø–∏—Ç –Ω–µ –¥–ª—è –Ω–∞—Å, —ñ–≥–Ω–æ—Ä—É—î–º–æ –π–æ–≥–æ
            console.log('[DICE] –ó–∞–ø–∏—Ç –Ω–µ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, —ñ–≥–Ω–æ—Ä—É—î–º–æ');
            return;
          }
          
          console.log('[DICE] –ó–∞–ø–∏—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, –æ–±—Ä–æ–±–ª—è—î–º–æ');
          
          // –í–∏–∫–æ–Ω—É—î–º–æ –∫–∏–¥–æ–∫ —á–µ—Ä–µ–∑ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É
          setTimeout(() => {
            executeAutoRoll(rollRequest);
          }, 1000);
        }
      };
      
      try {
        const unsubscribe = OBR.room.onMetadataChange(handleRoomMetadataChange);
        
        return () => {
          unsubscribe();
        };
      } catch (error) {
        console.error("üé≤ [DICE] DiceRollSync: Error setting up metadata listener:", error);
      }
    };
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OBR.onReady –∑ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—î—é
    OBR.onReady(() => {
      setupRoomMetadataListener();
    });
  }, []);
  
  useEffect(
    () =>
      useDiceRollStore.subscribe(async (state: any) => {
        console.log('[DICE] Store –∑–º—ñ–Ω–∏–≤—Å—è:', { 
          hasRoll: !!state.roll, 
          rollValuesCount: Object.keys(state.rollValues).length,
          rollValues: state.rollValues,
          hasFinishDieRoll: typeof state.finishDieRoll === 'function'
        });
        
        let changed = false;
        if (!state.roll) {
          changed = true;
          prevIds.current = [];
        } else {
          const ids = getDieFromDice(state.roll).map((die) => die.id);
          // Check array length for early change check
          if (prevIds.current.length !== ids.length) {
            changed = true;
          }
          // Check the ids have changed
          else if (!ids.every((id, index) => id === prevIds.current[index])) {
            changed = true;
          }
          // Check if we'e completed a roll
          else if (
            Object.values(state.rollValues).every((value) => value !== null)
          ) {
            changed = true;
            console.log('[DICE] –í—Å—ñ –∫—É–±–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é!');
            
            // –û—á–∏—â–∞—î–º–æ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
            try {
              const currentMetadata = await OBR.room.getMetadata();
              const darqie = currentMetadata.darqie as any;
              if (darqie && darqie.activeRoll) {
                const updatedMetadata = { 
                  ...currentMetadata, 
                  darqie: { 
                    ...darqie, 
                    activeRoll: null 
                  } 
                };
                await OBR.room.setMetadata(updatedMetadata);
                console.log('[DICE] –ó–∞–ø–∏—Ç –æ—á–∏—â–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó');
              }
            } catch (error) {
              console.error("üé≤ [DICE] Error clearing roll request after completion:", error);
            }
          }
          prevIds.current = ids;
        }

        if (changed) {
          // Hide values if needed
          const throws = state.roll?.hidden ? undefined : state.rollThrows;
          const values = state.roll?.hidden ? undefined : state.rollValues;
          const transforms = state.roll?.hidden
            ? undefined
            : state.rollTransforms;
          
          // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          const currentPlayerName = await OBR.player.getName();
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
          OBR.player.setMetadata({
            [getPluginId("roll")]: state.roll,
            [getPluginId("rollThrows")]: throws,
            [getPluginId("rollValues")]: values,
            [getPluginId("rollTransforms")]: transforms,
            [getPluginId("rollPlayer")]: currentPlayerName,
          });
        }
      }),
    []
  );

  return null;
}
